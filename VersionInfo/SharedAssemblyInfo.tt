<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	// Version information
    int major = 0;
    int minor = 0;
    int revision = 0;
    int build = 20;

	//Read the current SharedAssembly file to pluck out all the build numbers
    string output = File.ReadAllText(this.Host.ResolvePath("SharedAssemblyInfo.cs"));
    Regex pattern = new Regex("Version = \"(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<revision>\\d+)\\.(?<build>\\d+)\"");
    MatchCollection matches = pattern.Matches(output);
	//If we found exactly 1 match, go ahead and update the numbers
    if (matches.Count == 1)
    {
        major = Convert.ToInt32(matches[0].Groups["major"].Value);
        minor = Convert.ToInt32(matches[0].Groups["minor"].Value);
        build = Convert.ToInt32(matches[0].Groups["build"].Value) + 1;
        revision = Convert.ToInt32(matches[0].Groups["revision"].Value);
        if( this.Host.ResolveParameterValue("-","-","BuildConfiguration") == "Release" )
            revision++;
    }

// Drop out of code and render the template now
#>
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Resources;

// Shared Assembly info for All Projects
#region "Static Assembly Version info
[assembly: AssemblyCompany("Darin Higgins")]
[assembly: AssemblyProduct("GenerateLineMap")]
[assembly: AssemblyCopyright("Copyright Â© 2019 Darin Higgins")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
#if DEBUG
[assembly: AssemblyConfiguration("Debug")]
#else
[assembly: AssemblyConfiguration("Release")]
#endif

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

[assembly: NeutralResourcesLanguageAttribute( "en-US" )]

[assembly: AssemblyVersion(VersionInfo.Version)]
[assembly: AssemblyFileVersion(VersionInfo.Version)]
//this attribute supports semantic versioning
[assembly: AssemblyInformationalVersion(VersionInfo.InformationalVersion)]
#endregion

/// <summary>
/// This allows us to have a single place for version info
///	This also accommodates Nuget Semantic versioning
/// </summary>
internal struct VersionInfo
{
    public const string Version = "<#=major #>.<#=minor #>.<#=revision #>.<#=build #>";

    public const string InformationalVersion = "<#=major #>.<#=minor #>.<#=revision #>.<#=build #>-beta";
}
